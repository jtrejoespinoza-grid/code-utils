{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "python,",
		"prefix": "matter_template",
		"body": [
			"#",
			"#    Copyright (c) ${CURRENT_YEAR} Project CHIP Authors",
			"#    All rights reserved.",
			"#",
			"#    Licensed under the Apache License, Version 2.0 (the \"License\");",
			"#    you may not use this file except in compliance with the License.",
			"#    You may obtain a copy of the License at",
			"#",
			"#        http://www.apache.org/licenses/LICENSE-2.0",
			"#",
			"#    Unless required by applicable law or agreed to in writing, software",
			"#    distributed under the License is distributed on an \"AS IS\" BASIS,",
			"#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
			"#    See the License for the specific language governing permissions and",
			"#    limitations under the License.",
			"#",
			"# See https://github.com/project-chip/connectedhomeip/blob/master/docs/testing/python.md\"#defining-the-ci-test-arguments",
			"# for details about the block below.",
			"#",
			"# === BEGIN CI TEST ARGUMENTS ===",
			"# test-runner-runs:",
			"#   run1:",
			"#     app: \\${ALL_CLUSTERS_APP}",
			"#     app-args: --discriminator 1234 --KVS kvs1 --trace-to json:\\${TRACE_APP}.json",
			"#     script-args: >",
			"#       --storage-path admin_storage.json",
			"#       --commissioning-method on-network",
			"#       --discriminator 1234",
			"#       --passcode 20202021",
			"#       --PICS src/app/tests/suites/certification/ci-pics-values",
			"#       --trace-to json:\\${TRACE_TEST_JSON}.json",
			"#       --trace-to perfetto:\\${TRACE_TEST_PERFETTO}.perfetto",
			"#     factory-reset: true",
			"#     quiet: true",
			"# === END CI TEST ARGUMENTS ===\"\"import typing",
			"\n",
			"import chip.clusters as Clusters",
			"from chip.testing.matter_testing import (MatterBaseTest, TestStep, async_test_body, default_matter_test_main )",
			"from mobly import asserts",
			"\n",
			"class ${TM_FILENAME_BASE}(MatterBaseTest):",
			"\n",
			"\tdef desc_${TM_FILENAME_BASE}(self) -> str:",
			"\t\treturn \"Title Here\"",
			"\n",
			"\tdef pics_${TM_FILENAME_BASE}(self):",
			"\t\t\"\"\"Return PICS definitions asscociated with this test.\"\"\"",
			"\t\tpics = [",
			"\t\t\t\"\"",
			"\t\t]",
			"\t\treturn pics",
			"\n",
			"\tdef steps_${TM_FILENAME_BASE}(self) -> list[TestStep]:",
			"\t\tsteps = [",
			"\t\t # Add steps here",
			"\t\t]",
			"\t\treturn steps",
			"\n",
			"\t@async_test_body",
			"\tasync def test_${TM_FILENAME_BASE}(self):",
			"\t\tpass",
			"\n""if __name__ == \"__main__\":",
			"\tdefault_matter_test_main()"
		],
		"description": "Fill the basic of a file"
	}
}